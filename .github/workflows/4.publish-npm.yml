name: Publish

on:
  workflow_dispatch:  # permite execução manual
  workflow_run:
    workflows: ["Release"]
    branches: [main]
    types:
      - completed

jobs:
  check-release:
    if: false  # ⚠️ Publicação desativada. Remova esta linha para habilitar e descomente a condiçao abaixo.
    #if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.verify.outputs.should_publish }}
      release_tag: ${{ steps.verify.outputs.release_tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - name: Verify release
      #   id: verify
      #   run: |
      #     if [ "${{ github.event_name }}" == "release" ]; then
      #       echo "✅ Nova release publicada: ${{ github.event.release.tag_name }}"
      #       echo "should_publish=true" >> $GITHUB_OUTPUT
      #       echo "release_tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
      #     else
      #       echo "Verificando se há nova tag..."
      #       git fetch --tags
      #       LATEST_TAG=$(git describe --tags --abbrev=0)

      #       if [ -n "$LATEST_TAG" ]; then
      #         echo "✅ Nova tag detectada: $LATEST_TAG"
      #         echo "should_publish=true" >> $GITHUB_OUTPUT
      #         echo "release_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
      #       else
      #         echo "⚠️ Nenhuma tag encontrada. Publicação será ignorada."
      #         echo "should_publish=false" >> $GITHUB_OUTPUT
      #       fi
      #     fi

      - name: Fetch tags
        run: git fetch --tags

      - name: Verify changes since last tag
        id: verify
        run: |
          TAGS=($(git tag --sort=-creatordate))

          if [ "${#TAGS[@]}" -lt 2 ]; then
            echo "✅ Menos de duas tags, publica."
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "release_tag=${TAGS[0]}" >> $GITHUB_OUTPUT
          else
            echo "Última tag: ${TAGS[0]}"
            echo "Penúltima tag: ${TAGS[1]}"

            CHANGED_FILES=$(git diff --name-only ${TAGS[1]} ${TAGS[0]})

            echo "Arquivos alterados:"
            echo "$CHANGED_FILES"

            if echo "$CHANGED_FILES" | grep -qE "^(src/|README.md|package.json)"; then
              echo "✅ Alterações relevantes detectadas."
              echo "should_publish=true" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Nenhuma alteração relevante."
              echo "should_publish=false" >> $GITHUB_OUTPUT
            fi

            echo "release_tag=${TAGS[0]}" >> $GITHUB_OUTPUT
          fi

  publish-npm:
    needs: check-release
    if: needs.check-release.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Importante para provenance

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '>=20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install and Build package
        run: |
          npm ci --ignore-scripts
          npm run build

      - name: Publish to npm
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Notify success
        if: success()
        run: echo "✅ Published to NPM -> ${{ needs.check-release.outputs.release_tag }}"

  publish-gpr:
    needs: check-release
    if: needs.check-release.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '>=20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: ${{ github.repository_owner }}
          cache: 'npm'

      - name: Install and Build package
        run: |
          npm ci --ignore-scripts
          npm run build

      - name: Verify Package
        run: npm pack --dry-run

      - name: Publish to GitHub Packages
        run: npm publish --access=public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Verify publication
      #   run: |
      #     echo "📦 Publicado no GitHub Packages:"
      #     curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #       "https://api.github.com/users/${{ github.repository_owner }}/packages"

      - name: Verify publication
        if: success()
        run: echo "📦 Published ${{ needs.check-release.outputs.release_tag }} to GitHub Packages"


